
#include <iostream>
#include "Tiny2D.h"
#include "TinyTools.h"

static void RandomSplat(tiny2d::DrawBuffer& pBuffer)
{
    const uint8_t r = (uint8_t)rand();
    const uint8_t g = (uint8_t)rand();
    const uint8_t b = (uint8_t)rand();

    if( (rand()&15) == 0 )
    {
        const uint8_t col [2][4] = {
            {r,g,b,255},
            {
                (uint8_t)rand(),
                (uint8_t)rand(),
                (uint8_t)rand(),
                255}
        };
        const int size = 5 + (rand()&15);
        pBuffer.FillCheckerBoard(size,size,col);
    }
    else
    {
        pBuffer.FillCircle(
            rand()%pBuffer.GetWidth(),
            rand()%pBuffer.GetHeight(),
            5 + (rand()%25),
            r,g,b
        );
    }
}

int main(int argc, char *argv[])
{
// Say hello to the world!
    std::cout << "Hello world, a skeleton app generated by appbuild.\n";

// Display the constants defined by app build. \n";
    std::cout << "Application Version " << APP_VERSION << '\n';
    std::cout << "Build date and time " << APP_BUILD_DATE_TIME << '\n';
    std::cout << "Build date " << APP_BUILD_DATE << '\n';
    std::cout << "Build time " << APP_BUILD_TIME << '\n';

	tiny2d::FrameBuffer* FB = tiny2d::FrameBuffer::Open(tiny2d::FrameBuffer::VERBOSE_MESSAGES);
	if( !FB )
		return 1;

	tiny2d::DrawBuffer RT(FB);
	tiny2d::PixelFont Font(3);
	Font.SetBorder(true);

	srand(time(NULL));

	RT.Clear(0,0,0);

    // create some buffers that accumelate the graph.
    // Save CPU time by only updating when data changes instead of redrawing every frame.
    // The buffer still has to be copied every frame, but the contents only change a bit.

    const int size = 200;
    const int scrollStep = 3;
	
    tiny2d::DrawBuffer UpScroll(size,size);
    tiny2d::DrawBuffer DownScroll(size,size);
    tiny2d::DrawBuffer LeftScroll(size,size);
    tiny2d::DrawBuffer RightScroll(size,size);

    tiny2d::DrawBuffer UpLeft(size,size);
    tiny2d::DrawBuffer UpRight(size,size);
    tiny2d::DrawBuffer DownLeft(size,size);
    tiny2d::DrawBuffer DownRight(size,size);

    UpScroll.FillCheckerBoard(16,16,200,100);
    DownScroll.FillCheckerBoard(16,16,200,100);
    LeftScroll.FillCheckerBoard(16,16,200,100);
    RightScroll.FillCheckerBoard(16,16,200,100);

    UpLeft.FillCheckerBoard(16,16,200,100);
    UpRight.FillCheckerBoard(16,16,200,100);
    DownLeft.FillCheckerBoard(16,16,200,100);
    DownRight.FillCheckerBoard(16,16,200,100);

    tinytools::MillisecondTicker ScrollTimer(50);
    tinytools::MillisecondTicker SplatTimer(250);

    const uint8_t col[2][4] = {{155,110,90},{70,100,90}};

	while(FB->GetKeepGoing())
	{
        RT.FillCheckerBoard(64,50,col);

        if( ScrollTimer.Tick() )
        {
            UpScroll.ScrollBuffer(0,-scrollStep);
            DownScroll.ScrollBuffer(0,scrollStep);
            LeftScroll.ScrollBuffer(-scrollStep,0);
            RightScroll.ScrollBuffer(scrollStep,0);

            UpLeft.ScrollBuffer(-scrollStep,-scrollStep);
            UpRight.ScrollBuffer( scrollStep,-scrollStep);
            DownLeft.ScrollBuffer(-scrollStep, scrollStep);
            DownRight.ScrollBuffer( scrollStep, scrollStep);
        };

        if( SplatTimer.Tick() )
        {
            RandomSplat(UpScroll);
            RandomSplat(DownScroll);
            RandomSplat(LeftScroll);
            RandomSplat(RightScroll);

            RandomSplat(UpLeft);
            RandomSplat(UpRight);
            RandomSplat(DownLeft);
            RandomSplat(DownRight);
            
        }

        const int step = size + 20;

        RT.Blit(UpScroll,step * 0,100);
        Font.Print(RT,step * 0,100,"Up");

        RT.Blit(DownScroll,step * 1,100);
        Font.Print(RT,step * 1,100,"Down");

        RT.Blit(LeftScroll,step * 2,100);
        Font.Print(RT,step * 2,100,"Left");

        RT.Blit(RightScroll,step * 3,100);
        Font.Print(RT,step * 3,100,"Right");

        RT.Blit(UpLeft,step * 0,100 + step);
        Font.Print(RT,step * 0,100 + step,"Up Left");

        RT.Blit(UpRight,step * 1,100 + step);
        Font.Print(RT,step * 1,100 + step,"Up Right");

        RT.Blit(DownLeft,step * 2,100 + step);
        Font.Print(RT,step * 2,100 + step,"Down Left");

        RT.Blit(DownRight,step * 3,100 + step);
        Font.Print(RT,step * 3,100 + step,"Down Right");

		FB->Present(RT);
	}

	delete FB;

// And quit
    return EXIT_SUCCESS;
}
